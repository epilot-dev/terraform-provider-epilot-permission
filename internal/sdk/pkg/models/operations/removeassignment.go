// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"epilotpermissions/internal/sdk/pkg/models/shared"
	"fmt"
	"net/http"
)

type RemoveAssignmentPathParams struct {
	RoleID string `pathParam:"style=simple,explode=false,name=roleId"`
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

func NewRemoveAssignmentPathParams(input interface{}) (*RemoveAssignmentPathParams, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("removeAssignmentPathParams: Expected input to be a map[string]interface{}")
	}
	if _, ok = mapInput["roleId"]; !ok {
		return nil, fmt.Errorf("removeAssignmentPathParams: RoleID is required, but was not found")
	}
	var roleID string
	roleID, ok = mapInput["roleId"].(string)
	if !ok {
		return nil, fmt.Errorf("removeAssignmentPathParams: unexpected type for RoleID. Expected string but was %T", mapInput["roleId"])
	}
	if _, ok = mapInput["userId"]; !ok {
		return nil, fmt.Errorf("removeAssignmentPathParams: UserID is required, but was not found")
	}
	var userID string
	userID, ok = mapInput["userId"].(string)
	if !ok {
		return nil, fmt.Errorf("removeAssignmentPathParams: unexpected type for UserID. Expected string but was %T", mapInput["userId"])
	}
	out := &RemoveAssignmentPathParams{
		RoleID: roleID,
		UserID: userID,
	}

	return out, nil
}

type RemoveAssignmentRequest struct {
	PathParams RemoveAssignmentPathParams
}

func NewRemoveAssignmentRequest(input interface{}) (*RemoveAssignmentRequest, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("removeAssignmentRequest: Expected input to be a map[string]interface{}")
	}
	if _, ok = mapInput["PathParams"]; !ok {
		return nil, fmt.Errorf("removeAssignmentRequest: PathParams is required, but was not found")
	}
	pathParamsPtr, err := NewRemoveAssignmentPathParams(mapInput["PathParams"])
	if err != nil {
		return nil, err
	}
	pathParams := *pathParamsPtr
	out := &RemoveAssignmentRequest{
		PathParams: pathParams,
	}

	return out, nil
}

type RemoveAssignmentResponse struct {
	// ok
	Assignment  *shared.Assignment
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}

func NewRemoveAssignmentResponse(input interface{}) (*RemoveAssignmentResponse, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("removeAssignmentResponse: Expected input to be a map[string]interface{}")
	}
	var assignment *shared.Assignment
	if mapInput["Assignment"] != nil {
		assignmentTmp, err := shared.NewAssignment(mapInput["Assignment"])
		if err != nil {
			return nil, err
		}
		assignment = assignmentTmp
	}
	if _, ok = mapInput["ContentType"]; !ok {
		return nil, fmt.Errorf("removeAssignmentResponse: ContentType is required, but was not found")
	}
	var contentType string
	contentType, ok = mapInput["ContentType"].(string)
	if !ok {
		return nil, fmt.Errorf("removeAssignmentResponse: unexpected type for ContentType. Expected string but was %T", mapInput["ContentType"])
	}
	if _, ok = mapInput["StatusCode"]; !ok {
		return nil, fmt.Errorf("removeAssignmentResponse: StatusCode is required, but was not found")
	}
	if _, ok = mapInput["StatusCode"]; !ok {
		return nil, fmt.Errorf("removeAssignmentResponse: StatusCode is required, but was not found")
	}
	var statusCodeFloat64 float64
	statusCodeFloat64, ok = mapInput["StatusCode"].(float64)
	if !ok {
		return nil, fmt.Errorf("removeAssignmentResponse: unexpected type for StatusCode. Expected float64 but was %T", mapInput["StatusCode"])
	}
	var statusCode int
	if statusCodeFloat64 != float64(int(statusCodeFloat64)) {
		return nil, fmt.Errorf("removeAssignmentResponse: unexpected value for integer StatusCode. Got %#v", mapInput["StatusCode"])
	} else {
		statusCode = int(statusCodeFloat64)
	}
	rawResponse := new(http.Response)
	if _, ok = mapInput["RawResponse"]; !ok {
		rawResponse = nil
	} else {
		*rawResponse, ok = mapInput["RawResponse"].(http.Response)
		if !ok {
			return nil, fmt.Errorf("removeAssignmentResponse: unexpected type for RawResponse. Expected http.Response but was %T", mapInput["RawResponse"])
		}
	}
	out := &RemoveAssignmentResponse{
		Assignment:  assignment,
		ContentType: contentType,
		StatusCode:  statusCode,
		RawResponse: rawResponse,
	}

	return out, nil
}
