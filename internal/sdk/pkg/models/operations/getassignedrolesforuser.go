// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"fmt"
	"net/http"
)

type GetAssignedRolesForUserPathParams struct {
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

func NewGetAssignedRolesForUserPathParams(input interface{}) (*GetAssignedRolesForUserPathParams, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserPathParams: Expected input to be a map[string]interface{}")
	}
	if _, ok = mapInput["userId"]; !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserPathParams: UserID is required, but was not found")
	}
	var userID string
	userID, ok = mapInput["userId"].(string)
	if !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserPathParams: unexpected type for UserID. Expected string but was %T", mapInput["userId"])
	}
	out := &GetAssignedRolesForUserPathParams{
		UserID: userID,
	}

	return out, nil
}

type GetAssignedRolesForUserRequest struct {
	PathParams GetAssignedRolesForUserPathParams
}

func NewGetAssignedRolesForUserRequest(input interface{}) (*GetAssignedRolesForUserRequest, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserRequest: Expected input to be a map[string]interface{}")
	}
	if _, ok = mapInput["PathParams"]; !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserRequest: PathParams is required, but was not found")
	}
	pathParamsPtr, err := NewGetAssignedRolesForUserPathParams(mapInput["PathParams"])
	if err != nil {
		return nil, err
	}
	pathParams := *pathParamsPtr
	out := &GetAssignedRolesForUserRequest{
		PathParams: pathParams,
	}

	return out, nil
}

type GetAssignedRolesForUserResponse struct {
	// ok
	Assignments []string
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}

func NewGetAssignedRolesForUserResponse(input interface{}) (*GetAssignedRolesForUserResponse, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserResponse: Expected input to be a map[string]interface{}")
	}
	var assignments []string
	if _, ok = mapInput["Assignments"]; ok {
		assignmentsTmp, ok := mapInput["Assignments"].([]interface{})
		if !ok {
			return nil, fmt.Errorf("getAssignedRolesForUserResponse: unexpected type for Assignments. Expected []string but was %T", mapInput["Assignments"])
		}
		for _, assignmentsItemRaw := range assignmentsTmp {
			var assignmentsItem string
			assignmentsItem, ok = assignmentsItemRaw.(string)
			if !ok {
				return nil, fmt.Errorf("getAssignedRolesForUserResponse: unexpected type for AssignmentsItem. Expected string but was %T", assignmentsItemRaw)
			}
			assignments = append(assignments, assignmentsItem)
		}
	}
	if _, ok = mapInput["ContentType"]; !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserResponse: ContentType is required, but was not found")
	}
	var contentType string
	contentType, ok = mapInput["ContentType"].(string)
	if !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserResponse: unexpected type for ContentType. Expected string but was %T", mapInput["ContentType"])
	}
	if _, ok = mapInput["StatusCode"]; !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserResponse: StatusCode is required, but was not found")
	}
	if _, ok = mapInput["StatusCode"]; !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserResponse: StatusCode is required, but was not found")
	}
	var statusCodeFloat64 float64
	statusCodeFloat64, ok = mapInput["StatusCode"].(float64)
	if !ok {
		return nil, fmt.Errorf("getAssignedRolesForUserResponse: unexpected type for StatusCode. Expected float64 but was %T", mapInput["StatusCode"])
	}
	var statusCode int
	if statusCodeFloat64 != float64(int(statusCodeFloat64)) {
		return nil, fmt.Errorf("getAssignedRolesForUserResponse: unexpected value for integer StatusCode. Got %#v", mapInput["StatusCode"])
	} else {
		statusCode = int(statusCodeFloat64)
	}
	rawResponse := new(http.Response)
	if _, ok = mapInput["RawResponse"]; !ok {
		rawResponse = nil
	} else {
		*rawResponse, ok = mapInput["RawResponse"].(http.Response)
		if !ok {
			return nil, fmt.Errorf("getAssignedRolesForUserResponse: unexpected type for RawResponse. Expected http.Response but was %T", mapInput["RawResponse"])
		}
	}
	out := &GetAssignedRolesForUserResponse{
		Assignments: assignments,
		ContentType: contentType,
		StatusCode:  statusCode,
		RawResponse: rawResponse,
	}

	return out, nil
}
