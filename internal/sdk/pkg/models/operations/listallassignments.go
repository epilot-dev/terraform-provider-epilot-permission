// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"epilotpermissions/internal/sdk/pkg/models/shared"
	"fmt"
	"net/http"
)

// ListAllAssignments200ApplicationJSON - ok
type ListAllAssignments200ApplicationJSON struct {
	Assignments []shared.Assignment `json:"assignments,omitempty"`
}

func NewListAllAssignments200ApplicationJSON(input interface{}) (*ListAllAssignments200ApplicationJSON, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("listAllAssignments_200ApplicationJSON: Expected input to be a map[string]interface{}")
	}
	var assignments []shared.Assignment
	if _, ok = mapInput["assignments"]; ok {
		assignmentsTmp, ok := mapInput["assignments"].([]interface{})
		if !ok {
			return nil, fmt.Errorf("listAllAssignments_200ApplicationJSON: unexpected type for Assignments. Expected []shared.Assignment but was %T", mapInput["assignments"])
		}
		for _, assignmentsItemRaw := range assignmentsTmp {
			assignmentsItemPtr, err := shared.NewAssignment(assignmentsItemRaw)
			if err != nil {
				return nil, err
			}
			assignmentsItem := *assignmentsItemPtr
			assignments = append(assignments, assignmentsItem)
		}
	}
	out := &ListAllAssignments200ApplicationJSON{
		Assignments: assignments,
	}

	return out, nil
}

type ListAllAssignmentsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// ok
	ListAllAssignments200ApplicationJSONObject *ListAllAssignments200ApplicationJSON
}

func NewListAllAssignmentsResponse(input interface{}) (*ListAllAssignmentsResponse, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("listAllAssignmentsResponse: Expected input to be a map[string]interface{}")
	}
	if _, ok = mapInput["ContentType"]; !ok {
		return nil, fmt.Errorf("listAllAssignmentsResponse: ContentType is required, but was not found")
	}
	var contentType string
	contentType, ok = mapInput["ContentType"].(string)
	if !ok {
		return nil, fmt.Errorf("listAllAssignmentsResponse: unexpected type for ContentType. Expected string but was %T", mapInput["ContentType"])
	}
	if _, ok = mapInput["StatusCode"]; !ok {
		return nil, fmt.Errorf("listAllAssignmentsResponse: StatusCode is required, but was not found")
	}
	if _, ok = mapInput["StatusCode"]; !ok {
		return nil, fmt.Errorf("listAllAssignmentsResponse: StatusCode is required, but was not found")
	}
	var statusCodeFloat64 float64
	statusCodeFloat64, ok = mapInput["StatusCode"].(float64)
	if !ok {
		return nil, fmt.Errorf("listAllAssignmentsResponse: unexpected type for StatusCode. Expected float64 but was %T", mapInput["StatusCode"])
	}
	var statusCode int
	if statusCodeFloat64 != float64(int(statusCodeFloat64)) {
		return nil, fmt.Errorf("listAllAssignmentsResponse: unexpected value for integer StatusCode. Got %#v", mapInput["StatusCode"])
	} else {
		statusCode = int(statusCodeFloat64)
	}
	rawResponse := new(http.Response)
	if _, ok = mapInput["RawResponse"]; !ok {
		rawResponse = nil
	} else {
		*rawResponse, ok = mapInput["RawResponse"].(http.Response)
		if !ok {
			return nil, fmt.Errorf("listAllAssignmentsResponse: unexpected type for RawResponse. Expected http.Response but was %T", mapInput["RawResponse"])
		}
	}
	var listAllAssignments200ApplicationJSONObject *ListAllAssignments200ApplicationJSON
	if mapInput["listAllAssignments_200ApplicationJSON_object"] != nil {
		listAllAssignments200ApplicationJSONObjectTmp, err := NewListAllAssignments200ApplicationJSON(mapInput["listAllAssignments_200ApplicationJSON_object"])
		if err != nil {
			return nil, err
		}
		listAllAssignments200ApplicationJSONObject = listAllAssignments200ApplicationJSONObjectTmp
	}
	out := &ListAllAssignmentsResponse{
		ContentType: contentType,
		StatusCode:  statusCode,
		RawResponse: rawResponse,
		ListAllAssignments200ApplicationJSONObject: listAllAssignments200ApplicationJSONObject,
	}

	return out, nil
}
