// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"fmt"
)

type GrantEffectEnum string

const (
	GrantEffectEnumAllow GrantEffectEnum = "allow"
	GrantEffectEnumDeny  GrantEffectEnum = "deny"
)

type Grant struct {
	Action   string           `json:"action"`
	Effect   *GrantEffectEnum `json:"effect,omitempty"`
	Resource *string          `json:"resource,omitempty"`
}

func NewGrant(input interface{}) (*Grant, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("Grant: Expected input to be a map[string]interface{}")
	}
	if _, ok = mapInput["action"]; !ok {
		return nil, fmt.Errorf("Grant: Action is required, but was not found")
	}
	var action string
	action, ok = mapInput["action"].(string)
	if !ok {
		return nil, fmt.Errorf("Grant: unexpected type for Action. Expected string but was %T", mapInput["action"])
	}
	effectString := new(string)
	if _, ok = mapInput["effect"]; !ok {
		effectString = nil
	} else {
		*effectString, ok = mapInput["effect"].(string)
		if !ok {
			return nil, fmt.Errorf("Grant: unexpected type for Effect. Expected string but was %T", mapInput["effect"])
		}
	}
	var effect *GrantEffectEnum
	if effectString == nil {
		effect = nil
	} else {
		effectMaybe := GrantEffectEnum(*effectString)
		effect = &effectMaybe
		if *effect != GrantEffectEnumAllow && *effect != GrantEffectEnumDeny {
			return nil, fmt.Errorf("Grant: unexpected value for Effect. Expected one of EffectAllow, EffectDeny but was %s", mapInput["effect"])
		}
	}
	resource := new(string)
	if _, ok = mapInput["resource"]; !ok {
		resource = nil
	} else {
		*resource, ok = mapInput["resource"].(string)
		if !ok {
			return nil, fmt.Errorf("Grant: unexpected type for Resource. Expected string but was %T", mapInput["resource"])
		}
	}
	out := &Grant{
		Action:   action,
		Effect:   effect,
		Resource: resource,
	}

	return out, nil
}
