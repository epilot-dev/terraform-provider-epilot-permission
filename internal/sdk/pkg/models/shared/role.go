// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type RoleType string

const (
	RoleTypeUserRole    RoleType = "UserRole"
	RoleTypeOrgRole     RoleType = "OrgRole"
	RoleTypeShareRole   RoleType = "ShareRole"
	RoleTypePartnerRole RoleType = "PartnerRole"
)

type Role struct {
	UserRole    *UserRole
	OrgRole     *OrgRole
	ShareRole   *ShareRole
	PartnerRole *PartnerRole

	Type RoleType
}

func CreateRoleUserRole(userRole UserRole) Role {
	typ := RoleTypeUserRole

	return Role{
		UserRole: &userRole,
		Type:     typ,
	}
}

func CreateRoleOrgRole(orgRole OrgRole) Role {
	typ := RoleTypeOrgRole

	return Role{
		OrgRole: &orgRole,
		Type:    typ,
	}
}

func CreateRoleShareRole(shareRole ShareRole) Role {
	typ := RoleTypeShareRole

	return Role{
		ShareRole: &shareRole,
		Type:      typ,
	}
}

func CreateRolePartnerRole(partnerRole PartnerRole) Role {
	typ := RoleTypePartnerRole

	return Role{
		PartnerRole: &partnerRole,
		Type:        typ,
	}
}

func (u *Role) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	userRole := new(UserRole)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&userRole); err == nil {
		u.UserRole = userRole
		u.Type = RoleTypeUserRole
		return nil
	}

	orgRole := new(OrgRole)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&orgRole); err == nil {
		u.OrgRole = orgRole
		u.Type = RoleTypeOrgRole
		return nil
	}

	shareRole := new(ShareRole)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&shareRole); err == nil {
		u.ShareRole = shareRole
		u.Type = RoleTypeShareRole
		return nil
	}

	partnerRole := new(PartnerRole)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&partnerRole); err == nil {
		u.PartnerRole = partnerRole
		u.Type = RoleTypePartnerRole
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Role) MarshalJSON() ([]byte, error) {
	if u.UserRole != nil {
		return json.Marshal(u.UserRole)
	}

	if u.OrgRole != nil {
		return json.Marshal(u.OrgRole)
	}

	if u.ShareRole != nil {
		return json.Marshal(u.ShareRole)
	}

	if u.PartnerRole != nil {
		return json.Marshal(u.PartnerRole)
	}

	return nil, nil
}
