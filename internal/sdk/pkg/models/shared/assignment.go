// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"fmt"
)

// Assignment - A role attached to an user
type Assignment struct {
	Roles []string `json:"roles,omitempty"`
	// Id of a user
	UserID *string `json:"user_id,omitempty"`
}

func NewAssignment(input interface{}) (*Assignment, error) {
	mapInput, ok := input.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("Assignment: Expected input to be a map[string]interface{}")
	}
	var roles []string
	if _, ok = mapInput["roles"]; ok {
		rolesTmp, ok := mapInput["roles"].([]interface{})
		if !ok {
			return nil, fmt.Errorf("Assignment: unexpected type for Roles. Expected []string but was %T", mapInput["roles"])
		}
		for _, rolesItemRaw := range rolesTmp {
			var rolesItem string
			rolesItem, ok = rolesItemRaw.(string)
			if !ok {
				return nil, fmt.Errorf("Assignment: unexpected type for RolesItem. Expected string but was %T", rolesItemRaw)
			}
			roles = append(roles, rolesItem)
		}
	}
	userID := new(string)
	if _, ok = mapInput["user_id"]; !ok {
		userID = nil
	} else {
		*userID, ok = mapInput["user_id"].(string)
		if !ok {
			return nil, fmt.Errorf("Assignment: unexpected type for UserID. Expected string but was %T", mapInput["user_id"])
		}
	}
	out := &Assignment{
		Roles:  roles,
		UserID: userID,
	}

	return out, nil
}
