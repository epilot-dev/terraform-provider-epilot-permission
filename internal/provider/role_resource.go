// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"epilot-permission/internal/sdk"
	"epilot-permission/internal/sdk/pkg/models/operations"
	"fmt"

	"epilot-permission/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &RoleResource{}
var _ resource.ResourceWithImportState = &RoleResource{}

func NewRoleResource() resource.Resource {
	return &RoleResource{}
}

// RoleResource defines the resource implementation.
type RoleResource struct {
	client *sdk.SDK
}

// RoleResourceModel describes the resource data model.
type RoleResourceModel struct {
	Role   *Role        `tfsdk:"role"`
	RoleID types.String `tfsdk:"role_id"`
}

func (r *RoleResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_role"
}

func (r *RoleResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Role Resource",

		Attributes: map[string]schema.Attribute{
			"role": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"org_role": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"expires_at": schema.StringAttribute{
								Optional: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
								Description: `date and time then the role will expire`,
							},
							"grants": schema.ListNestedAttribute{
								Required: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"action": schema.StringAttribute{
											Required: true,
										},
										"effect": schema.StringAttribute{
											Optional: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"allow",
													"deny",
												),
											},
											Description: `must be one of [allow, deny]`,
										},
										"resource": schema.StringAttribute{
											Optional: true,
										},
									},
								},
								Description: `List of grants (permissions) applied to the role`,
							},
							"id": schema.StringAttribute{
								Required:    true,
								Description: `Format: <organization_id>:<slug>`,
							},
							"name": schema.StringAttribute{
								Required:    true,
								Description: `Human-friendly name for the role`,
							},
							"organization_id": schema.StringAttribute{
								Required:    true,
								Description: `Id of an organization`,
							},
							"slug": schema.StringAttribute{
								Required:    true,
								Description: `URL-friendly name for the role`,
							},
							"type": schema.StringAttribute{
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"org_role",
									),
								},
								Description: `must be one of [org_role]`,
							},
						},
						Description: `A role automatically applied to all users in an organization.`,
					},
					"partner_role": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"expires_at": schema.StringAttribute{
								Optional: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
								Description: `date and time then the role will expire`,
							},
							"grants": schema.ListNestedAttribute{
								Required: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"action": schema.StringAttribute{
											Required: true,
										},
										"effect": schema.StringAttribute{
											Optional: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"allow",
													"deny",
												),
											},
											Description: `must be one of [allow, deny]`,
										},
										"resource": schema.StringAttribute{
											Optional: true,
										},
									},
								},
								Description: `List of grants (permissions) applied to the role`,
							},
							"id": schema.StringAttribute{
								Required:    true,
								Description: `Format: <organization_id>:<slug>`,
							},
							"name": schema.StringAttribute{
								Required:    true,
								Description: `Human-friendly name for the role`,
							},
							"organization_id": schema.StringAttribute{
								Required:    true,
								Description: `Id of an organization`,
							},
							"partner_org_id": schema.StringAttribute{
								Optional: true,
							},
							"slug": schema.StringAttribute{
								Required:    true,
								Description: `URL-friendly name for the role`,
							},
							"type": schema.StringAttribute{
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"partner_role",
									),
								},
								Description: `must be one of [partner_role]`,
							},
						},
						Description: `A role that appears in another organization's role list that can be assigned but not modified by the partner organization.`,
					},
					"share_role": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"expires_at": schema.StringAttribute{
								Optional: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
								Description: `date and time then the role will expire`,
							},
							"grants": schema.ListNestedAttribute{
								Required: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"action": schema.StringAttribute{
											Required: true,
										},
										"effect": schema.StringAttribute{
											Optional: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"allow",
													"deny",
												),
											},
											Description: `must be one of [allow, deny]`,
										},
										"resource": schema.StringAttribute{
											Optional: true,
										},
									},
								},
								Description: `List of grants (permissions) applied to the role`,
							},
							"id": schema.StringAttribute{
								Required:    true,
								Description: `Format: <organization_id>:<slug>`,
							},
							"name": schema.StringAttribute{
								Required:    true,
								Description: `Human-friendly name for the role`,
							},
							"organization_id": schema.StringAttribute{
								Required:    true,
								Description: `Id of an organization`,
							},
							"slug": schema.StringAttribute{
								Required:    true,
								Description: `URL-friendly name for the role`,
							},
							"type": schema.StringAttribute{
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"share_role",
									),
								},
								Description: `must be one of [share_role]`,
							},
						},
						Description: `A role that can be assigned to users in other organizations for sharing purposes.`,
					},
					"user_role": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"expires_at": schema.StringAttribute{
								Optional: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
								Description: `date and time then the role will expire`,
							},
							"grants": schema.ListNestedAttribute{
								Required: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"action": schema.StringAttribute{
											Required: true,
										},
										"effect": schema.StringAttribute{
											Optional: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"allow",
													"deny",
												),
											},
											Description: `must be one of [allow, deny]`,
										},
										"resource": schema.StringAttribute{
											Optional: true,
										},
									},
								},
								Description: `List of grants (permissions) applied to the role`,
							},
							"id": schema.StringAttribute{
								Required:    true,
								Description: `Format: <organization_id>:<slug>`,
							},
							"name": schema.StringAttribute{
								Required:    true,
								Description: `Human-friendly name for the role`,
							},
							"organization_id": schema.StringAttribute{
								Required:    true,
								Description: `Id of an organization`,
							},
							"slug": schema.StringAttribute{
								Required:    true,
								Description: `URL-friendly name for the role`,
							},
							"type": schema.StringAttribute{
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"user_role",
									),
								},
								Description: `must be one of [user_role]`,
							},
						},
						Description: `A standard user role. Must be explicitly assigned to users.`,
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
			},
			"role_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
		},
	}
}

func (r *RoleResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RoleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *RoleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	role := data.ToCreateSDKType()
	role1 := role
	roleID := reflectJSONKey(role, "id").String()
	request := operations.PutRoleRequest{
		Role:   role1,
		RoleID: roleID,
	}
	res, err := r.client.Roles.PutRole(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.Role)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RoleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *RoleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	role := data.ToGetSDKType()
	roleID := reflectJSONKey(role, "id").String()
	request := operations.GetRoleRequest{
		RoleID: roleID,
	}
	res, err := r.client.Roles.GetRole(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.Role)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RoleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *RoleResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	role := data.ToUpdateSDKType()
	role1 := role
	roleID := reflectJSONKey(role, "id").String()
	request := operations.PutRoleRequest{
		Role:   role1,
		RoleID: roleID,
	}
	res, err := r.client.Roles.PutRole(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.Role)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RoleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *RoleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	role := data.ToDeleteSDKType()
	roleID := reflectJSONKey(role, "id").String()
	request := operations.DeleteRoleRequest{
		RoleID: roleID,
	}
	res, err := r.client.Roles.DeleteRole(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *RoleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("to_get_sdk_type"), req, resp)
}
