// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"epilotpermissions/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"reflect"
	"time"
)

func (r *RoleResourceModel) ToSDKType() *shared.Role {
	var out shared.Role
	var userRole *shared.UserRole
	if r.Role.UserRole != nil {
		expiresAt := new(time.Time)
		if !r.Role.UserRole.ExpiresAt.IsUnknown() && !r.Role.UserRole.ExpiresAt.IsNull() {
			*expiresAt, _ = time.Parse(time.RFC3339Nano, r.Role.UserRole.ExpiresAt.ValueString())
		} else {
			expiresAt = nil
		}
		grants := make([]shared.Grant, 0)
		for _, grantsItem := range r.Role.UserRole.Grants {
			action := grantsItem.Action.ValueString()
			effect := new(shared.GrantEffectEnum)
			if !grantsItem.Effect.IsUnknown() && !grantsItem.Effect.IsNull() {
				*effect = shared.GrantEffectEnum(grantsItem.Effect.ValueString())
			} else {
				effect = nil
			}
			resource := new(string)
			if !grantsItem.Resource.IsUnknown() && !grantsItem.Resource.IsNull() {
				*resource = grantsItem.Resource.ValueString()
			} else {
				resource = nil
			}
			grants = append(grants, shared.Grant{
				Action:   action,
				Effect:   effect,
				Resource: resource,
			})
		}
		id := r.Role.UserRole.ID.ValueString()
		name := r.Role.UserRole.Name.ValueString()
		organizationID := r.Role.UserRole.OrganizationID.ValueString()
		slug := r.Role.UserRole.Slug.ValueString()
		type1 := shared.UserRoleTypeEnum(r.Role.UserRole.Type.ValueString())
		userRole = &shared.UserRole{
			ExpiresAt:      expiresAt,
			Grants:         grants,
			ID:             id,
			Name:           name,
			OrganizationID: organizationID,
			Slug:           slug,
			Type:           type1,
		}
	}
	if userRole != nil {
		out = shared.Role{
			UserRole: userRole,
		}
	}
	var orgRole *shared.OrgRole
	if r.Role.OrgRole != nil {
		expiresAt1 := new(time.Time)
		if !r.Role.OrgRole.ExpiresAt.IsUnknown() && !r.Role.OrgRole.ExpiresAt.IsNull() {
			*expiresAt1, _ = time.Parse(time.RFC3339Nano, r.Role.OrgRole.ExpiresAt.ValueString())
		} else {
			expiresAt1 = nil
		}
		grants1 := make([]shared.Grant, 0)
		for _, grantsItem1 := range r.Role.OrgRole.Grants {
			action1 := grantsItem1.Action.ValueString()
			effect1 := new(shared.GrantEffectEnum)
			if !grantsItem1.Effect.IsUnknown() && !grantsItem1.Effect.IsNull() {
				*effect1 = shared.GrantEffectEnum(grantsItem1.Effect.ValueString())
			} else {
				effect1 = nil
			}
			resource1 := new(string)
			if !grantsItem1.Resource.IsUnknown() && !grantsItem1.Resource.IsNull() {
				*resource1 = grantsItem1.Resource.ValueString()
			} else {
				resource1 = nil
			}
			grants1 = append(grants1, shared.Grant{
				Action:   action1,
				Effect:   effect1,
				Resource: resource1,
			})
		}
		id1 := r.Role.OrgRole.ID.ValueString()
		name1 := r.Role.OrgRole.Name.ValueString()
		organizationId1 := r.Role.OrgRole.OrganizationID.ValueString()
		slug1 := r.Role.OrgRole.Slug.ValueString()
		type2 := shared.OrgRoleTypeEnum(r.Role.OrgRole.Type.ValueString())
		orgRole = &shared.OrgRole{
			ExpiresAt:      expiresAt1,
			Grants:         grants1,
			ID:             id1,
			Name:           name1,
			OrganizationID: organizationId1,
			Slug:           slug1,
			Type:           type2,
		}
	}
	if orgRole != nil {
		out = shared.Role{
			OrgRole: orgRole,
		}
	}
	var shareRole *shared.ShareRole
	if r.Role.ShareRole != nil {
		expiresAt2 := new(time.Time)
		if !r.Role.ShareRole.ExpiresAt.IsUnknown() && !r.Role.ShareRole.ExpiresAt.IsNull() {
			*expiresAt2, _ = time.Parse(time.RFC3339Nano, r.Role.ShareRole.ExpiresAt.ValueString())
		} else {
			expiresAt2 = nil
		}
		grants2 := make([]shared.Grant, 0)
		for _, grantsItem2 := range r.Role.ShareRole.Grants {
			action2 := grantsItem2.Action.ValueString()
			effect2 := new(shared.GrantEffectEnum)
			if !grantsItem2.Effect.IsUnknown() && !grantsItem2.Effect.IsNull() {
				*effect2 = shared.GrantEffectEnum(grantsItem2.Effect.ValueString())
			} else {
				effect2 = nil
			}
			resource2 := new(string)
			if !grantsItem2.Resource.IsUnknown() && !grantsItem2.Resource.IsNull() {
				*resource2 = grantsItem2.Resource.ValueString()
			} else {
				resource2 = nil
			}
			grants2 = append(grants2, shared.Grant{
				Action:   action2,
				Effect:   effect2,
				Resource: resource2,
			})
		}
		id2 := r.Role.ShareRole.ID.ValueString()
		name2 := r.Role.ShareRole.Name.ValueString()
		organizationId2 := r.Role.ShareRole.OrganizationID.ValueString()
		slug2 := r.Role.ShareRole.Slug.ValueString()
		type3 := shared.ShareRoleTypeEnum(r.Role.ShareRole.Type.ValueString())
		shareRole = &shared.ShareRole{
			ExpiresAt:      expiresAt2,
			Grants:         grants2,
			ID:             id2,
			Name:           name2,
			OrganizationID: organizationId2,
			Slug:           slug2,
			Type:           type3,
		}
	}
	if shareRole != nil {
		out = shared.Role{
			ShareRole: shareRole,
		}
	}
	var partnerRole *shared.PartnerRole
	if r.Role.PartnerRole != nil {
		expiresAt3 := new(time.Time)
		if !r.Role.PartnerRole.ExpiresAt.IsUnknown() && !r.Role.PartnerRole.ExpiresAt.IsNull() {
			*expiresAt3, _ = time.Parse(time.RFC3339Nano, r.Role.PartnerRole.ExpiresAt.ValueString())
		} else {
			expiresAt3 = nil
		}
		grants3 := make([]shared.Grant, 0)
		for _, grantsItem3 := range r.Role.PartnerRole.Grants {
			action3 := grantsItem3.Action.ValueString()
			effect3 := new(shared.GrantEffectEnum)
			if !grantsItem3.Effect.IsUnknown() && !grantsItem3.Effect.IsNull() {
				*effect3 = shared.GrantEffectEnum(grantsItem3.Effect.ValueString())
			} else {
				effect3 = nil
			}
			resource3 := new(string)
			if !grantsItem3.Resource.IsUnknown() && !grantsItem3.Resource.IsNull() {
				*resource3 = grantsItem3.Resource.ValueString()
			} else {
				resource3 = nil
			}
			grants3 = append(grants3, shared.Grant{
				Action:   action3,
				Effect:   effect3,
				Resource: resource3,
			})
		}
		id3 := r.Role.PartnerRole.ID.ValueString()
		name3 := r.Role.PartnerRole.Name.ValueString()
		organizationId3 := r.Role.PartnerRole.OrganizationID.ValueString()
		partnerOrgID := new(string)
		if !r.Role.PartnerRole.PartnerOrgID.IsUnknown() && !r.Role.PartnerRole.PartnerOrgID.IsNull() {
			*partnerOrgID = r.Role.PartnerRole.PartnerOrgID.ValueString()
		} else {
			partnerOrgID = nil
		}
		slug3 := r.Role.PartnerRole.Slug.ValueString()
		type4 := shared.PartnerRoleTypeEnum(r.Role.PartnerRole.Type.ValueString())
		partnerRole = &shared.PartnerRole{
			ExpiresAt:      expiresAt3,
			Grants:         grants3,
			ID:             id3,
			Name:           name3,
			OrganizationID: organizationId3,
			PartnerOrgID:   partnerOrgID,
			Slug:           slug3,
			Type:           type4,
		}
	}
	if partnerRole != nil {
		out = shared.Role{
			PartnerRole: partnerRole,
		}
	}
	return &out

}

func (r *RoleResourceModel) RefreshFromSDKType(resp *shared.Role) {
	// Unwrap
	if resp.UserRole != nil {
		r.Role.UserRole = &UserRole{}
		if resp.UserRole.ExpiresAt != nil {
			r.Role.UserRole.ExpiresAt = types.StringValue(resp.UserRole.ExpiresAt.Format(time.RFC3339))
		} else {
			r.Role.UserRole.ExpiresAt = types.StringNull()
		}
		r.Role.UserRole.Grants = nil
		for _, grantsItem := range resp.UserRole.Grants {
			var grants1 Grant
			grants1.Action = types.StringValue(grantsItem.Action)
			if grantsItem.Effect != nil {
				grants1.Effect = types.StringValue(string(*grantsItem.Effect))
			} else {
				grants1.Effect = types.StringNull()
			}
			if grantsItem.Resource != nil {
				grants1.Resource = types.StringValue(*grantsItem.Resource)
			} else {
				grants1.Resource = types.StringNull()
			}
			r.Role.UserRole.Grants = append(r.Role.UserRole.Grants, grants1)
		}
		r.Role.UserRole.ID = types.StringValue(resp.UserRole.ID)
		r.Role.UserRole.Name = types.StringValue(resp.UserRole.Name)
		r.Role.UserRole.OrganizationID = types.StringValue(resp.UserRole.OrganizationID)
		r.Role.UserRole.Slug = types.StringValue(resp.UserRole.Slug)
		r.Role.UserRole.Type = types.StringValue(string(resp.UserRole.Type))
	}
	if resp.OrgRole != nil {
		r.Role.OrgRole = &OrgRole{}
		if resp.OrgRole.ExpiresAt != nil {
			r.Role.OrgRole.ExpiresAt = types.StringValue(resp.OrgRole.ExpiresAt.Format(time.RFC3339))
		} else {
			r.Role.OrgRole.ExpiresAt = types.StringNull()
		}
		r.Role.OrgRole.Grants = nil
		for _, grantsItem1 := range resp.OrgRole.Grants {
			var grants3 Grant
			grants3.Action = types.StringValue(grantsItem1.Action)
			if grantsItem1.Effect != nil {
				grants3.Effect = types.StringValue(string(*grantsItem1.Effect))
			} else {
				grants3.Effect = types.StringNull()
			}
			if grantsItem1.Resource != nil {
				grants3.Resource = types.StringValue(*grantsItem1.Resource)
			} else {
				grants3.Resource = types.StringNull()
			}
			r.Role.OrgRole.Grants = append(r.Role.OrgRole.Grants, grants3)
		}
		r.Role.OrgRole.ID = types.StringValue(resp.OrgRole.ID)
		r.Role.OrgRole.Name = types.StringValue(resp.OrgRole.Name)
		r.Role.OrgRole.OrganizationID = types.StringValue(resp.OrgRole.OrganizationID)
		r.Role.OrgRole.Slug = types.StringValue(resp.OrgRole.Slug)
		r.Role.OrgRole.Type = types.StringValue(string(resp.OrgRole.Type))
	}
	if resp.ShareRole != nil {
		r.Role.ShareRole = &ShareRole{}
		if resp.ShareRole.ExpiresAt != nil {
			r.Role.ShareRole.ExpiresAt = types.StringValue(resp.ShareRole.ExpiresAt.Format(time.RFC3339))
		} else {
			r.Role.ShareRole.ExpiresAt = types.StringNull()
		}
		r.Role.ShareRole.Grants = nil
		for _, grantsItem2 := range resp.ShareRole.Grants {
			var grants5 Grant
			grants5.Action = types.StringValue(grantsItem2.Action)
			if grantsItem2.Effect != nil {
				grants5.Effect = types.StringValue(string(*grantsItem2.Effect))
			} else {
				grants5.Effect = types.StringNull()
			}
			if grantsItem2.Resource != nil {
				grants5.Resource = types.StringValue(*grantsItem2.Resource)
			} else {
				grants5.Resource = types.StringNull()
			}
			r.Role.ShareRole.Grants = append(r.Role.ShareRole.Grants, grants5)
		}
		r.Role.ShareRole.ID = types.StringValue(resp.ShareRole.ID)
		r.Role.ShareRole.Name = types.StringValue(resp.ShareRole.Name)
		r.Role.ShareRole.OrganizationID = types.StringValue(resp.ShareRole.OrganizationID)
		r.Role.ShareRole.Slug = types.StringValue(resp.ShareRole.Slug)
		r.Role.ShareRole.Type = types.StringValue(string(resp.ShareRole.Type))
	}
	if resp.PartnerRole != nil {
		r.Role.PartnerRole = &PartnerRole{}
		if resp.PartnerRole.ExpiresAt != nil {
			r.Role.PartnerRole.ExpiresAt = types.StringValue(resp.PartnerRole.ExpiresAt.Format(time.RFC3339))
		} else {
			r.Role.PartnerRole.ExpiresAt = types.StringNull()
		}
		r.Role.PartnerRole.Grants = nil
		for _, grantsItem3 := range resp.PartnerRole.Grants {
			var grants7 Grant
			grants7.Action = types.StringValue(grantsItem3.Action)
			if grantsItem3.Effect != nil {
				grants7.Effect = types.StringValue(string(*grantsItem3.Effect))
			} else {
				grants7.Effect = types.StringNull()
			}
			if grantsItem3.Resource != nil {
				grants7.Resource = types.StringValue(*grantsItem3.Resource)
			} else {
				grants7.Resource = types.StringNull()
			}
			r.Role.PartnerRole.Grants = append(r.Role.PartnerRole.Grants, grants7)
		}
		r.Role.PartnerRole.ID = types.StringValue(resp.PartnerRole.ID)
		r.Role.PartnerRole.Name = types.StringValue(resp.PartnerRole.Name)
		r.Role.PartnerRole.OrganizationID = types.StringValue(resp.PartnerRole.OrganizationID)
		if resp.PartnerRole.PartnerOrgID != nil {
			r.Role.PartnerRole.PartnerOrgID = types.StringValue(*resp.PartnerRole.PartnerOrgID)
		} else {
			r.Role.PartnerRole.PartnerOrgID = types.StringNull()
		}
		r.Role.PartnerRole.Slug = types.StringValue(resp.PartnerRole.Slug)
		r.Role.PartnerRole.Type = types.StringValue(string(resp.PartnerRole.Type))
	}
	// Unwrap done. Flattening in
	r.ID = types.StringValue(reflect.Indirect(reflect.ValueOf(resp)).FieldByName("ID").String())
	r.Name = types.StringValue(reflect.Indirect(reflect.ValueOf(resp)).FieldByName("Name").String())
	r.OrganizationID = types.StringValue(reflect.Indirect(reflect.ValueOf(resp)).FieldByName("OrganizationID").String())
	r.Slug = types.StringValue(reflect.Indirect(reflect.ValueOf(resp)).FieldByName("Slug").String())

}
